Timeseries(obslabel="", tsdata=as.matrix(data[[n]]), varname=varname,
ytext=ytext, legendtext=legendtext,
plotcex=1, timing=timing,
smoothed = TRUE, winsize = 14,
plotcolours="blue",
vqcdata = as.matrix(var_qc))
}
dev.off()
#Initialise file
pdf(paste(outfile, "Timeseries.pdf", sep=""), height=no_vars*1.5, width=no_vars)
par(mai=c(0.6,0.7,0.7,0.2))
par(omi=c(0.2,0.2,0.2,0.1))
par(mfrow=c(ceiling(no_vars/2), 2))
#Plot
for(n in 1:length(data)){
Timeseries(obslabel="", tsdata=as.matrix(data[[n]]), varname=varname,
ytext=ytext, legendtext=legendtext,
plotcex=1, timing=timing,
smoothed = TRUE, winsize = 14,
plotcolours="blue",
vqcdata = as.matrix(var_qc))
}
dev.off()
#Initialise file
pdf(paste(outfile, "Timeseries.pdf", sep=""), height=no_vars*1.5, width=no_vars)
par(mai=c(0.4,0.4,0.4,0.2))
par(omi=c(0.2,0.2,0.2,0.1))
par(mfrow=c(ceiling(no_vars/2), 2))
#Plot
for(n in 1:length(data)){
Timeseries(obslabel="", tsdata=as.matrix(data[[n]]), varname=varname,
ytext=ytext, legendtext=legendtext,
plotcex=1, timing=timing,
smoothed = TRUE, winsize = 14,
plotcolours="blue",
vqcdata = as.matrix(var_qc))
}
dev.off()
#Initialise file
pdf(paste(outfile, "Timeseries.pdf", sep=""), height=no_vars*1.5, width=no_vars*1.2)
par(mai=c(0.4,0.4,0.4,0.2))
par(omi=c(0.2,0.2,0.2,0.1))
par(mfrow=c(ceiling(no_vars/2), 2))
#Plot
for(n in 1:length(data)){
Timeseries(obslabel="", tsdata=as.matrix(data[[n]]), varname=varname,
ytext=ytext, legendtext=legendtext,
plotcex=1, timing=timing,
smoothed = TRUE, winsize = 14,
plotcolours="blue",
vqcdata = as.matrix(var_qc))
}
dev.off()
#Initialise file
pdf(paste(outfile, "Timeseries.pdf", sep=""), height=no_vars*1.6, width=no_vars*1.2)
par(mai=c(0.4,0.4,0.4,0.2))
par(omi=c(0.2,0.2,0.2,0.1))
par(mfrow=c(ceiling(no_vars/2), 2))
#Plot
for(n in 1:length(data)){
Timeseries(obslabel="", tsdata=as.matrix(data[[n]]), varname=varname,
ytext=ytext, legendtext=legendtext,
plotcex=1, timing=timing,
smoothed = TRUE, winsize = 14,
plotcolours="blue",
vqcdata = as.matrix(var_qc))
}
dev.off()
#Initialise file
pdf(paste(outfile, "Timeseries.pdf", sep=""), height=no_vars*1.7, width=no_vars*1.2)
par(mai=c(0.4,0.4,0.4,0.2))
par(omi=c(0.2,0.2,0.2,0.1))
par(mfrow=c(ceiling(no_vars/2), 2))
#Plot
for(n in 1:length(data)){
Timeseries(obslabel="", tsdata=as.matrix(data[[n]]), varname=varname,
ytext=ytext, legendtext=legendtext,
plotcex=1, timing=timing,
smoothed = TRUE, winsize = 14,
plotcolours="blue",
vqcdata = as.matrix(var_qc))
}
dev.off()
#Initialise file
pdf(paste(outfile, "Timeseries.pdf", sep=""), height=no_vars*1.7, width=no_vars*1.3)
par(mai=c(0.4,0.6,0.4,0.2))
par(omi=c(0.2,0.2,0.2,0.1))
par(mfrow=c(ceiling(no_vars/2), 2))
#Plot
for(n in 1:length(data)){
Timeseries(obslabel="", tsdata=as.matrix(data[[n]]), varname=varname,
ytext=ytext, legendtext=legendtext,
plotcex=1, timing=timing,
smoothed = TRUE, winsize = 14,
plotcolours="blue",
vqcdata = as.matrix(var_qc))
}
dev.off()
#Initialise file
pdf(paste(outfile, "Timeseries.pdf", sep=""), height=no_vars*1.7, width=no_vars*1.4)
par(mai=c(0.4,0.6,0.4,0.2))
par(omi=c(0.2,0.2,0.2,0.1))
par(mfrow=c(ceiling(no_vars/2), 2))
#Plot
for(n in 1:length(data)){
Timeseries(obslabel="", tsdata=as.matrix(data[[n]]), varname=varname,
ytext=ytext, legendtext=legendtext,
plotcex=1, timing=timing,
smoothed = TRUE, winsize = 14,
plotcolours="blue",
vqcdata = as.matrix(var_qc))
}
dev.off()
#Initialise file
pdf(paste(outfile, "Timeseries.pdf", sep=""), height=no_vars*1.9, width=no_vars*1.4)
par(mai=c(0.4,0.6,0.4,0.2))
par(omi=c(0.2,0.2,0.2,0.1))
par(mfrow=c(ceiling(no_vars/2), 2))
#Plot
for(n in 1:length(data)){
Timeseries(obslabel="", tsdata=as.matrix(data[[n]]), varname=varname,
ytext=ytext, legendtext=legendtext,
plotcex=1, timing=timing,
smoothed = TRUE, winsize = 14,
plotcolours="blue",
vqcdata = as.matrix(var_qc))
}
dev.off()
#Initialise file
pdf(paste(outfile, "Timeseries.pdf", sep=""), height=no_vars*1.9, width=no_vars*1.4)
par(mai=c(0.4,0.6,0.4,0.2))
par(omi=c(0.2,0.2,0.2,0.1))
par(mfrow=c(ceiling(no_vars/2), 2))
#Plot
for(n in 1:length(data)){
Timeseries(obslabel="", tsdata=as.matrix(data[[n]]), varname=varname,
ytext=ytext, legendtext=legendtext,
plotcex=1.5, timing=timing,
smoothed = TRUE, winsize = 14,
plotcolours="blue",
vqcdata = as.matrix(var_qc))
}
dev.off()
#Initialise file
pdf(paste(outfile, "Timeseries.pdf", sep=""), height=no_vars*2, width=no_vars*1.4)
par(mai=c(0.6,0.6,0.4,0.2))
par(omi=c(0.2,0.2,0.2,0.1))
par(mfrow=c(ceiling(no_vars/2), 2))
#Plot
for(n in 1:length(data)){
Timeseries(obslabel="", tsdata=as.matrix(data[[n]]), varname=varname,
ytext=ytext, legendtext=legendtext,
plotcex=1.5, timing=timing,
smoothed = TRUE, winsize = 14,
plotcolours="blue",
vqcdata = as.matrix(var_qc))
}
dev.off()
#Initialise file
pdf(paste(outfile, "Timeseries.pdf", sep=""), height=no_vars*2.1, width=no_vars*1.4)
par(mai=c(0.6,0.6,0.4,0.2))
par(omi=c(0.2,0.2,0.2,0.1))
par(mfrow=c(ceiling(no_vars/2), 2))
#Plot
for(n in 1:length(data)){
Timeseries(obslabel="", tsdata=as.matrix(data[[n]]), varname=varname,
ytext=ytext, legendtext=legendtext,
plotcex=1.5, timing=timing,
smoothed = TRUE, winsize = 14,
plotcolours="blue",
vqcdata = as.matrix(var_qc))
}
dev.off()
#Initialise file
pdf(paste(outfile, "Timeseries.pdf", sep=""), height=no_vars*2.2, width=no_vars*1.4)
par(mai=c(0.6,0.6,0.4,0.2))
par(omi=c(0.2,0.2,0.2,0.1))
par(mfrow=c(ceiling(no_vars/2), 2))
#Plot
for(n in 1:length(data)){
Timeseries(obslabel="", tsdata=as.matrix(data[[n]]), varname=varname,
ytext=ytext, legendtext=legendtext,
plotcex=1.5, timing=timing,
smoothed = TRUE, winsize = 14,
plotcolours="blue",
vqcdata = as.matrix(var_qc))
}
dev.off()
source('~/Documents/FLUXNET2016_processing/scripts/examples/example_conversion.R')
plot
plot[1]
source('~/Documents/FLUXNET2016_processing/scripts/examples/example_conversion.R')
plot=c("a","b","c")
is.na(plot)
is.na(plot)
!is.na(plot)
!is.na(plot!any(is.na(plot)))
!any(is.na(plot))
source('~/Documents/FLUXNET2016_processing/scripts/examples/example_conversion.R')
data_vars
n=1
paste(data_vars[n], " (", data_units[n], ")", sep="")
source('~/Documents/FLUXNET2016_processing/scripts/examples/example_conversion.R')
source('~/Documents/FLUXNET2016_processing/scripts/examples/example_conversion.R')
test=as.matrix(data[[n]])
dim(test)
range(test)
data_vars[n]
plot(test)
dev.off()
plot(test,1)
plot(test[,1])
AnnualCycle(obslabel="", acdata=as.matrix(data[[n]]),
varname=data_vars[n],
ytext=paste(data_vars[n], " (", data_units[n], ")", sep=""),
legendtext=data_vars[n],
timestepsize=timestepsize,
whole=TRUE, plotcolours="blue")
range(as.matrix(data[[n]]))
which(is.na(as.matrix(data[[n]])))
data_vars
source('~/Documents/FLUXNET2016_processing/scripts/examples/example_conversion.R')
source('~/Documents/FLUXNET2016_processing/scripts/examples/example_conversion.R')
source('~/Documents/FLUXNET2016_processing/scripts/examples/example_conversion.R')
n=1
test=data[[1]]
any(is.na(test))
plot(test)
dev.off()
plot(test)
graphics.off()
plot(test)
plot(test,type="l")
timestepsize <- time[2] - time[1]
#Find start year
startdate <- as.Date(strsplit(time_units, "seconds since ")[[1]][2])
syear     <- as.numeric(format(startdate, "%Y"))
#Load qc variables if available
if(length(qc_vars) > 0) {
qc_data <- lapply(qc_vars, ncvar_get, nc=ncfile)
names(qc_data) <- qc_vars
}
no_vars <- length(data_vars)
no_vars
?text
source('~/Documents/FLUXNET2016_processing/scripts/R/Plotting/1DAnnualCycle.R')
#Initialise file
pdf(paste(outfile, "AnnualCycle.pdf", sep=""), height=no_vars,
width=no_vars)
par(mai=c(0.6,0.7,0.7,0.2))
par(omi=c(0.2,0.2,0.2,0.1))
par(mfrow=c(ceiling(sqrt(no_vars)), ceiling(sqrt(no_vars))))
#Plot
for(n in 1:length(data)){   #NEED TO GET whole ARGUMENT FROM DATA, NOT SET TO TRUE IN FUNCTION !!!!!!!!!!!
AnnualCycle(obslabel="", acdata=as.matrix(data[[n]]),
varname=data_vars[n],
ytext=paste(data_vars[n], " (", data_units[n], ")", sep=""),
legendtext=data_vars[n],
timestepsize=timestepsize,
whole=TRUE, plotcolours="blue")
}
#Close file
dev.off()
AnnualCycle(obslabel="", acdata=as.matrix(data[[n]]),
varname=data_vars[n],
ytext=paste(data_vars[n], " (", data_units[n], ")", sep=""),
legendtext=data_vars[n],
timestepsize=timestepsize,
whole=TRUE, plotcolours="blue")
source('~/Documents/FLUXNET2016_processing/scripts/examples/example_conversion.R')
source('~/Documents/FLUXNET2016_processing/scripts/examples/example_conversion.R')
source('~/Documents/FLUXNET2016_processing/scripts/examples/example_conversion.R')
?text
source('~/Documents/FLUXNET2016_processing/scripts/examples/example_conversion.R')
abs(c(NA,1))
abs(c(NA))
?legend
?text
source('~/Documents/FLUXNET2016_processing/scripts/examples/example_conversion.R')
plot(1:10)
text(2,3, "TESTING")
text(2,3, "TESTING", adj=(0,1))
text(2,3, "TESTING", adj=c(0,1))
text(2,3, "TESTING", adj=c(1,1))
text(2,3, "TESTING", adj=c(1,0))
text(2,3, "TESTING", adj=c(0.5,0))
plot(1:10)
text(2,3, "TESTING")
text(2,3, "TESTING", adj=c(0.5,0))
source('~/Documents/FLUXNET2016_processing/scripts/examples/example_conversion.R')
sum(c(1,2,NA))
source('~/Documents/FLUXNET2016_processing/scripts/examples/example_conversion.R')
avday[k,0:tstepinday/5,]
avday[k,0:tstepinday/5,]
source('~/Documents/FLUXNET2016_processing/scripts/examples/example_conversion.R')
sd(c(1,NA,3))
source('~/Documents/FLUXNET2016_processing/scripts/examples/example_conversion.R')
source('~/Documents/FLUXNET2016_processing/scripts/examples/example_conversion.R')
avday
avday
dim(avday)
source('~/Documents/FLUXNET2016_processing/scripts/examples/example_conversion.R')
run_id = "_run_alloc0.5"#_vcmax0.1"# "_LeafAge1"
path<-"~/Documents/Rainfall_assymmetry/Outputs/"
dirs <- list.files(path=paste(path, site, sep="/"), pattern=run_id, full.names=TRUE)
library(zoo)
library(ncdf4)
# initial garbage collection
rm( list=ls(all=TRUE) )
#---------------------#
site="Konza"
#---------------------#
run_id = "_run_alloc0.5"#_vcmax0.1"# "_LeafAge1"
path<-"~/Documents/Rainfall_assymmetry/Outputs/"
dirs <- list.files(path=paste(path, site, sep="/"), pattern=run_id, full.names=TRUE)
dirs
dirs<-dirs[c(3,4)]
dirs
files <- vector()
for(k in 1:length(dirs)) files[k] <- list.files(path=dirs[k], pattern="cable_output_0.nc", full.names=TRUE)
#experiment names
experiments <- sapply(files, function(x) strsplit(strsplit(x, paste(site,"/",sep=""))[[1]][2], paste(run_id, "/cable_output_0.nc", sep="")[[1]][1]))
#vars <- c("Evap", "TVeg", "ESoil", "LAI", "CASAGPP", "CASANPP", "Rainf", "Tair", "GPP") #SoilMoist
#vars       <- c("Hfls", "Hfls_transpiration", "Hfls_baresoil", "Lai", "GPP", "NPP")
#cablenames <- c("Evap", "TVeg", "ESoil", "LAI", "CASAGPP", "CASANPP")
#conv       <- c(1/28.35648, 1/28.35648, 1/28.35648, 1, 60*60*24*1000, 60*60*24*1000) #convert to desired units
#vars       <- c("Evap", "TVeg", "ESoil", "LAI", "CASAGPP", "CASANPP", "fwsoil", "Rainf", "Tair")
#conv       <- c(60*30, 60*30, 60*30, 1, 1, 1, 1, 60*30, 1) #convert to desired units
#ylab       <- c("mm/day", "mm/day", "mm/day", "m2/m2", "gC/m2/day", "gC/m2/day", "-", "mm/day", "deg C")
#vars       <- c("Evap", "TVeg", "ESoil", "LAI", "CASAGPP", "CASANPP", "Rainf", "Tair", "CASA_Cplant")
#conv       <- c(60*30, 60*30, 60*30, 1, 1, 1, 60*30, 1, 1) #convert to desired units
#ylab       <- c("mm/day", "mm/day", "mm/day", "m2/m2", "gC/m2/day", "gC/m2/day", "mm/day", "deg C", "gC/m2")
vars        <- c("CASAGPP", "CASANPP", "CASArootResp", "CASAgrowthResp", "CASAleafResp", "CASAwoodResp", "CASAsoilResp", "LAI", "Rainf", "TVeg", "ECanop", "ESoil", "Qs", "Qsb")
target_vars <- c("CASAGPP", "CASANPP", "CASA auto Resp", "CASAsoilResp", "LAI", "Rainf", "TVeg", "ECanop", "ESoil", "Qs", "Qsb")
conv        <- c(1, 1, 1, 1, 1, 1, 1, 1, 60*30, 60*30, 60*30, 60*30, 60*30, 60*30) #convert to desired units
ylab        <- c("gC/m2/day", "gC/m2/day", "gC/m2/day", "gC/m2/day", "m2/m2", "mm/day", "mm/day",  "mm/day", "mm/day", "mm/day", "mm/day")
ylab_annual <- c("gC/m2/yr", "gC/m2/yr",  "gC/m2/yr", "gC/m2/yr", "m2/m2", "mm/yr", "mm/yr",  "mm/yr", "mm/yr", "mm/yr", "mm/yr")
ncid <- lapply(files, nc_open)
data <- list()
for(k in 1:length(ncid)) data[[k]] <- lapply(1:length(vars), function(x) ncvar_get(ncid[[k]], varid=vars[x]) )
#Average non-CASA variables from 30-min to daily
ind   <- which(vars=="ECanop" | vars=="TVeg" | vars=="ESoil" | vars=="Rainf" | vars=="Tair" | vars=="LAI"
| vars=="Qs" | vars=="Qsb" | vars=="GPP" | vars=="NPP")
tstep <- 48 #half-hourly
for(k in 1:length(ncid)) {
for(i in ind) {
data[[k]][[i]] <- data[[k]][[i]] * conv[i]
if(vars[i]=="Tair" | vars[i]=="LAI"){
data[[k]][[i]] <- rowMeans(matrix(data[[k]][[i]], ncol=tstep, byrow=TRUE))
} else {
data[[k]][[i]] <- rowSums(matrix(data[[k]][[i]], ncol=tstep, byrow=TRUE))
}
}
}
if(any(target_vars=="CASA auto Resp")){
ind2 <- which(vars=="CASArootResp" | vars=="CASAgrowthResp" | vars=="CASAleafResp" | vars=="CASAwoodResp")
if(length(ind2) != 4) stop("ERROR in auto. respiration")
auto_resp <- lapply(data, function(y) rowSums(matrix(unlist(lapply(ind2, function(z) y[[z]])), ncol=length(ind2))))  #sum CASA respirations
for(k in 1:length(data)){
data[[k]][[ind2[1]]] <- auto_resp[[k]]
data[[k]][ind2[2:length(ind2)]] <- NULL
}
}
#only plot last ten yrs
#if(site=="Konza" | site=="grassLTER"){
#  data <- lapply(data, function(y) lapply(y, function(z) z[(length(z)-3649):length(z)]))
#}
#Convert temperature K to C
#for(k in 1:length(ncid)) data[[k]][[which(vars=="Tair")]] <- data[[k]][[which(vars=="Tair")]] - 273.15
#Convert total NPP to ANPP
#for(k in 1:length(ncid)) data[[k]][[which(target_vars=="ANPP")]] <- data[[k]][[which(target_vars=="ANPP")]] *
#                                                                   leaffrac[[k]][(length(leaffrac[[k]])-
#                                                                  (length(data[[k]][[1]])-1)):length(leaffrac[[k]])]
##Obtain years ##
#Start yr
start_yr <- as.numeric(strsplit(strsplit(ncatt_get(ncid[[1]], "time", "units")$value, "seconds since ")[[1]][2], "-01-01")[[1]][1])
#No. yrs
yrs <- round(length(data[[k]][[1]])/365, digits=0)
#All yrs
all_yrs <- seq(start_yr, length.out=yrs, by=1)
plot(data[[1]][[1]], type="l")
lines(data[[2]][[1]],col="red")
files
range(data[[1]][[1]]-data[[2]][[1]])
plot(data[[2]][[1]], type="l", col="blue")
lines(data[[1]][[1]],col="red")
length(data)
length(data[[1]])
length(data[[2]])
plot(data[[2]][[3]], type="l", col="blue")
lines(data[[1]][[3]],col="red")
target_vars[3]
plot(data[[1]][[1]]-data[[2]][[1]])
target_vars
plot(data[[1]][[5]]-data[[2]][[5]])
plot(data[[1]][[5]])
par(mfrow=c(2,1))
plot(data[[1]][[5]], type="l", col="blue")
lines(data[[2]][[5]],col="red")
plot(data[[1]][[5]], type="l", col="blue")
plot(data[[1]][[5]], type="l", col="blue", ylab="Leaf area index", xlab="time")
lines(data[[2]][[5]],col="red")
plot(data[[1]][[5]]-data[[2]][[5]], type="l", col="blue", ylab="Leaf area index", xlab="time")
target_vars
length(vars)
length(target_vars)
target_vars
range(data[[1]][[6]]-data[[1]][[6]])
plot(data[[1]][[6]]-mean(data[[1]][[6]]), type="l")
mean(data[[1]][[6]])
range(data[[1]][[6]])
hist(data[[1]][[6]])
hist(data[[1]][[6]], freq = 10)
hist(data[[1]][[6]], freq = 30)
?hist
hist(data[[1]][[6]], breaks= 30)
hist(data[[1]][[6]], breaks= 60)
hist(data[[1]][[6]], breaks= 80)
mean(data[[1]][[6]])
plot(data[[1]][[6]]-mean(data[[1]][[6]]))
library(zoo)
plot(rollmean(data[[1]][[6]],48)-mean(data[[1]][[6]]))
plot(rollmean(data[[1]][[6]],48)-mean(data[[1]][[6]]), type="l")
lines(c(0,1000000), c(0,0), lty=2)
test=matrix(data[[1]][[6]], ncol=48, byrow=TRUE)
length(data[[1]][[6]])
length(data[[1]][[6]])/48
11315/365
plot(rollmean(data[[1]][[6]],14)-mean(data[[1]][[6]]), type="l")
sd(data[[1]][[6]])
test <- data
#---------------------#
site="grassLTER"
#---------------------#
run_id = "_run_alloc0.5"#_vcmax0.1"# "_LeafAge1"
path<-"~/Documents/Rainfall_assymmetry/Outputs/"
dirs <- list.files(path=paste(path, site, sep="/"), pattern=run_id, full.names=TRUE)
#if(site=="Konza") dirs <- dirs[-which(grepl("vcmax0.15", dirs))] #ignore calibration runs
dirs
run_id = "_run_alloc"#_vcmax0.1"# "_LeafAge1"
path<-"~/Documents/Rainfall_assymmetry/Outputs/"
dirs <- list.files(path=paste(path, site, sep="/"), pattern=run_id, full.names=TRUE)
dirs
dirs <- dirs[1]
files <- vector()
for(k in 1:length(dirs)) files[k] <- list.files(path=dirs[k], pattern="cable_output_0.nc", full.names=TRUE)
#experiment names
experiments <- sapply(files, function(x) strsplit(strsplit(x, paste(site,"/",sep=""))[[1]][2], paste(run_id, "/cable_output_0.nc", sep="")[[1]][1]))
#vars <- c("Evap", "TVeg", "ESoil", "LAI", "CASAGPP", "CASANPP", "Rainf", "Tair", "GPP") #SoilMoist
#vars       <- c("Hfls", "Hfls_transpiration", "Hfls_baresoil", "Lai", "GPP", "NPP")
#cablenames <- c("Evap", "TVeg", "ESoil", "LAI", "CASAGPP", "CASANPP")
#conv       <- c(1/28.35648, 1/28.35648, 1/28.35648, 1, 60*60*24*1000, 60*60*24*1000) #convert to desired units
#vars       <- c("Evap", "TVeg", "ESoil", "LAI", "CASAGPP", "CASANPP", "fwsoil", "Rainf", "Tair")
#conv       <- c(60*30, 60*30, 60*30, 1, 1, 1, 1, 60*30, 1) #convert to desired units
#ylab       <- c("mm/day", "mm/day", "mm/day", "m2/m2", "gC/m2/day", "gC/m2/day", "-", "mm/day", "deg C")
#vars       <- c("Evap", "TVeg", "ESoil", "LAI", "CASAGPP", "CASANPP", "Rainf", "Tair", "CASA_Cplant")
#conv       <- c(60*30, 60*30, 60*30, 1, 1, 1, 60*30, 1, 1) #convert to desired units
#ylab       <- c("mm/day", "mm/day", "mm/day", "m2/m2", "gC/m2/day", "gC/m2/day", "mm/day", "deg C", "gC/m2")
vars        <- c("CASAGPP", "CASANPP", "CASArootResp", "CASAgrowthResp", "CASAleafResp", "CASAwoodResp", "CASAsoilResp", "LAI", "Rainf", "TVeg", "ECanop", "ESoil", "Qs", "Qsb")
target_vars <- c("CASAGPP", "CASANPP", "CASA auto Resp", "CASAsoilResp", "LAI", "Rainf", "TVeg", "ECanop", "ESoil", "Qs", "Qsb")
conv        <- c(1, 1, 1, 1, 1, 1, 1, 1, 60*30, 60*30, 60*30, 60*30, 60*30, 60*30) #convert to desired units
ylab        <- c("gC/m2/day", "gC/m2/day", "gC/m2/day", "gC/m2/day", "m2/m2", "mm/day", "mm/day",  "mm/day", "mm/day", "mm/day", "mm/day")
ylab_annual <- c("gC/m2/yr", "gC/m2/yr",  "gC/m2/yr", "gC/m2/yr", "m2/m2", "mm/yr", "mm/yr",  "mm/yr", "mm/yr", "mm/yr", "mm/yr")
ncid <- lapply(files, nc_open)
data <- list()
for(k in 1:length(ncid)) data[[k]] <- lapply(1:length(vars), function(x) ncvar_get(ncid[[k]], varid=vars[x]) )
#Average non-CASA variables from 30-min to daily
ind   <- which(vars=="ECanop" | vars=="TVeg" | vars=="ESoil" | vars=="Rainf" | vars=="Tair" | vars=="LAI"
| vars=="Qs" | vars=="Qsb" | vars=="GPP" | vars=="NPP")
tstep <- 48 #half-hourly
for(k in 1:length(ncid)) {
for(i in ind) {
data[[k]][[i]] <- data[[k]][[i]] * conv[i]
if(vars[i]=="Tair" | vars[i]=="LAI"){
data[[k]][[i]] <- rowMeans(matrix(data[[k]][[i]], ncol=tstep, byrow=TRUE))
} else {
data[[k]][[i]] <- rowSums(matrix(data[[k]][[i]], ncol=tstep, byrow=TRUE))
}
}
}
if(any(target_vars=="CASA auto Resp")){
ind2 <- which(vars=="CASArootResp" | vars=="CASAgrowthResp" | vars=="CASAleafResp" | vars=="CASAwoodResp")
if(length(ind2) != 4) stop("ERROR in auto. respiration")
auto_resp <- lapply(data, function(y) rowSums(matrix(unlist(lapply(ind2, function(z) y[[z]])), ncol=length(ind2))))  #sum CASA respirations
for(k in 1:length(data)){
data[[k]][[ind2[1]]] <- auto_resp[[k]]
data[[k]][ind2[2:length(ind2)]] <- NULL
}
}
#only plot last ten yrs
#if(site=="Konza" | site=="grassLTER"){
#  data <- lapply(data, function(y) lapply(y, function(z) z[(length(z)-3649):length(z)]))
#}
#Convert temperature K to C
#for(k in 1:length(ncid)) data[[k]][[which(vars=="Tair")]] <- data[[k]][[which(vars=="Tair")]] - 273.15
#Convert total NPP to ANPP
#for(k in 1:length(ncid)) data[[k]][[which(target_vars=="ANPP")]] <- data[[k]][[which(target_vars=="ANPP")]] *
#                                                                   leaffrac[[k]][(length(leaffrac[[k]])-
#                                                                  (length(data[[k]][[1]])-1)):length(leaffrac[[k]])]
##Obtain years ##
#Start yr
start_yr <- as.numeric(strsplit(strsplit(ncatt_get(ncid[[1]], "time", "units")$value, "seconds since ")[[1]][2], "-01-01")[[1]][1])
#No. yrs
yrs <- round(length(data[[k]][[1]])/365, digits=0)
#All yrs
all_yrs <- seq(start_yr, length.out=yrs, by=1)
sd(data[[1]][[6]])
plot(rollmean(data[[1]][[6]], 14), type="l")
plot(rollmean(test[[1]][[6]], 14), type="l", main="Konza (problem site)", ylab="Rainf (mm/day)", xlab="time")
plot(rollmean(data[[1]][[6]], 14), type="l", main="Colorado", ylab="Rainf (mm/day)", xlab="time")
sd(data[[1]][[6]])/mean(data[[1]][[6]])
sd(test[[1]][[6]])/mean(test[[1]][[6]])
