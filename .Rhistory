files
site_code="[A-Z]{2}-[a-z]{3}"
version <- gsub("\\.", "-", datasetversion)
if (is.character(resolution) & nchar(resolution) > 0) {
file_template <- paste("FLX", site_code, datasetname, subset, resolution,
years, version, sep = "_")
file_template <- paste0(file_template, extension)
} else {
file_template <- paste("FLX", site_code, datasetname, subset, years,
version, sep = "_")
file_template <- paste0(file_template, extension)
}
template=file_template
files <- list.files(path, template, full.names = TRUE, ignore.case=TRUE)
files
source('~/Documents/FLUXNET2016_processing/scripts/R/Helpers.R')
#Fluxnet site ID (see http://fluxnet.fluxdata.org/sites/site-list-and-pages/)
site_code <- "AU-Ync"
# This directory should contain appropriate data from
# http://fluxnet.fluxdata.org/data/fluxnet2015-dataset/
in_path <- "~/Documents/FLUXNET2016_processing/Inputs"
#Outputs will be saved to this directory
out_path <- "~/Documents/FLUXNET2016_processing/Outputs"
# Name and version of dataset being processed (e.g. "FLUXNET2015")
datasetname="FLUXNET2015"
# Input Fluxnet data file (using FULLSET in this example, se R/Helpers.R for details)
infile <- get_fluxnet_files(in_path, site_code,
datasetname=datasetname)
infile
#Fluxnet site ID (see http://fluxnet.fluxdata.org/sites/site-list-and-pages/)
site_code <- "AU-Ync"
# This directory should contain appropriate data from
# http://fluxnet.fluxdata.org/data/fluxnet2015-dataset/
in_path <- "~/Documents/FLUXNET2016_processing/Inputs"
#Outputs will be saved to this directory
out_path <- "~/Documents/FLUXNET2016_processing/Outputs"
# Name and version of dataset being processed (e.g. "FLUXNET2015")
datasetname="FLUXNET2015"
# Input Fluxnet data file (using FULLSET in this example, se R/Helpers.R for details)
infile <- get_fluxnet_files(in_path, site_code,
datasetname=datasetname)
infile
source('~/Documents/FLUXNET2016_processing/scripts/R/Helpers.R')
#Fluxnet site ID (see http://fluxnet.fluxdata.org/sites/site-list-and-pages/)
site_code <- "AU-Ync"
# This directory should contain appropriate data from
# http://fluxnet.fluxdata.org/data/fluxnet2015-dataset/
in_path <- "~/Documents/FLUXNET2016_processing/Inputs"
#Outputs will be saved to this directory
out_path <- "~/Documents/FLUXNET2016_processing/Outputs"
# Name and version of dataset being processed (e.g. "FLUXNET2015")
datasetname="FLUXNET2015"
# Input Fluxnet data file (using FULLSET in this example, se R/Helpers.R for details)
infile <- get_fluxnet_files(in_path, site_code,
datasetname=datasetname)
infile
ERA_file <- get_fluxnet_erai_files(in_path, site_code,
datasetname = datasetname,
datasetversion = datasetversion)
ERA_file
source('~/Documents/FLUXNET2016_processing/scripts/R/Helpers.R')
#Fluxnet site ID (see http://fluxnet.fluxdata.org/sites/site-list-and-pages/)
site_code <- "AU-Ync"
# This directory should contain appropriate data from
# http://fluxnet.fluxdata.org/data/fluxnet2015-dataset/
in_path <- "~/Documents/FLUXNET2016_processing/Inputs"
#Outputs will be saved to this directory
out_path <- "~/Documents/FLUXNET2016_processing/Outputs"
# Name and version of dataset being processed (e.g. "FLUXNET2015")
datasetname="FLUXNET2015"
# Input Fluxnet data file (using FULLSET in this example, se R/Helpers.R for details)
infile <- get_fluxnet_files(in_path, site_code,
datasetname=datasetname)
#Retrieve dataset version
datasetversion <- get_fluxnet_version_no(infile)
###############################
###--- Optional settings ---###
###############################
# ERAinterim meteo file for gap-filling met data (set to FALSE if not desired)
ERA_gapfill  <- TRUE
ERA_file <- get_fluxnet_erai_files(in_path, site_code,
datasetname = datasetname,
datasetversion = datasetversion)
infile
ERA_file
site_code
get_fluxnet_erai_files <- function(path, site_code = "[A-Z]{2}-[A-Z]{3}", ...) {
browser()
template <- get_fluxnet_erai_template(site_code = site_code, ...)
files <- list.files(path, template, full.names = TRUE, ignore.case=TRUE)
return(files)
}
ERA_file <- get_fluxnet_erai_files(in_path, site_code,
datasetname = datasetname,
datasetversion = datasetversion)
site_code
template <- get_fluxnet_erai_template(site_code = site_code, ...)
template
source('~/Documents/FLUXNET2016_processing/scripts/R/Helpers.R')
#Fluxnet site ID (see http://fluxnet.fluxdata.org/sites/site-list-and-pages/)
site_code <- "AU-Ync"
# This directory should contain appropriate data from
# http://fluxnet.fluxdata.org/data/fluxnet2015-dataset/
in_path <- "~/Documents/FLUXNET2016_processing/Inputs"
#Outputs will be saved to this directory
out_path <- "~/Documents/FLUXNET2016_processing/Outputs"
# Name and version of dataset being processed (e.g. "FLUXNET2015")
datasetname="FLUXNET2015"
# Input Fluxnet data file (using FULLSET in this example, se R/Helpers.R for details)
infile <- get_fluxnet_files(in_path, site_code,
datasetname=datasetname)
#Retrieve dataset version
datasetversion <- get_fluxnet_version_no(infile)
###############################
###--- Optional settings ---###
###############################
# ERAinterim meteo file for gap-filling met data (set to FALSE if not desired)
ERA_gapfill  <- TRUE
ERA_file <- get_fluxnet_erai_files(in_path, site_code,
datasetname = datasetname,
datasetversion = datasetversion)
site_code
template <- get_fluxnet_erai_template(site_code = site_code, ...)
template
source('~/Documents/FLUXNET2016_processing/scripts/R/Helpers.R')
#Fluxnet site ID (see http://fluxnet.fluxdata.org/sites/site-list-and-pages/)
site_code <- "AU-Ync"
# This directory should contain appropriate data from
# http://fluxnet.fluxdata.org/data/fluxnet2015-dataset/
in_path <- "~/Documents/FLUXNET2016_processing/Inputs"
#Outputs will be saved to this directory
out_path <- "~/Documents/FLUXNET2016_processing/Outputs"
# Name and version of dataset being processed (e.g. "FLUXNET2015")
datasetname="FLUXNET2015"
# Input Fluxnet data file (using FULLSET in this example, se R/Helpers.R for details)
infile <- get_fluxnet_files(in_path, site_code,
datasetname=datasetname)
#Retrieve dataset version
datasetversion <- get_fluxnet_version_no(infile)
###############################
###--- Optional settings ---###
###############################
# ERAinterim meteo file for gap-filling met data (set to FALSE if not desired)
ERA_gapfill  <- TRUE
ERA_file <- get_fluxnet_erai_files(in_path, site_code,
datasetname = datasetname,
datasetversion = datasetversion)
ERA_file
infile
# This directory should contain appropriate data from
# http://fluxnet.fluxdata.org/data/fluxnet2015-dataset/
in_path <- "~/Documents/FLUXNET2016_processing/Inputs"
#Outputs will be saved to this directory
out_path <- "~/Documents/FLUXNET2016_processing/Outputs"
# Name and version of dataset being processed (e.g. "FLUXNET2015")
datasetname="FLUXNET2015"
# Input Fluxnet data file (using FULLSET in this example, se R/Helpers.R for details)
infile <- get_fluxnet_files(in_path, datasetname=datasetname)
#Retrieve dataset version
datasetversion <- get_fluxnet_version_no(infile)
###############################
###--- Optional settings ---###
###############################
# ERAinterim meteo file for gap-filling met data (set to FALSE if not desired)
ERA_gapfill  <- TRUE
ERA_file <- get_fluxnet_erai_files(in_path, datasetname = datasetname,
datasetversion = datasetversion)
#What percentage of time steps allowed to be missing
infile
ERA_file
library(zoo)
library(ncdf4)
# initial garbage collection
rm( list=ls(all=TRUE) )
#---------------------#
site="Konza"
#---------------------#
run_id = "_run_alloc0.5"# "_LeafAge1"
path<-"~/Documents/Rainfall_assymmetry/Outputs/"
dirs <- list.files(path=paste(path, site, sep="/"), pattern=run_id, full.names=TRUE)
dirs
dirs=dirs[1:3]
dirs
files <- vector()
for(k in 1:length(dirs)) files[k] <- list.files(path=dirs[k], pattern="cable_output_0.nc", full.names=TRUE)
#experiment names
experiments <- sapply(files, function(x) strsplit(strsplit(x, paste(site,"/",sep=""))[[1]][2], paste(run_id, "/cable_output_0.nc", sep="")[[1]][1]))
files
experiments
experiments[2]<-"Konza101"
experiments[3]<-"Konza102"
experiments
#vars <- c("Evap", "TVeg", "ESoil", "LAI", "CASAGPP", "CASANPP", "Rainf", "Tair", "GPP") #SoilMoist
#vars       <- c("Hfls", "Hfls_transpiration", "Hfls_baresoil", "Lai", "GPP", "NPP")
#cablenames <- c("Evap", "TVeg", "ESoil", "LAI", "CASAGPP", "CASANPP")
#conv       <- c(1/28.35648, 1/28.35648, 1/28.35648, 1, 60*60*24*1000, 60*60*24*1000) #convert to desired units
#vars       <- c("Evap", "TVeg", "ESoil", "LAI", "CASAGPP", "CASANPP", "fwsoil", "Rainf", "Tair")
#conv       <- c(60*30, 60*30, 60*30, 1, 1, 1, 1, 60*30, 1) #convert to desired units
#ylab       <- c("mm/day", "mm/day", "mm/day", "m2/m2", "gC/m2/day", "gC/m2/day", "-", "mm/day", "deg C")
#vars       <- c("Evap", "TVeg", "ESoil", "LAI", "CASAGPP", "CASANPP", "Rainf", "Tair", "CASA_Cplant")
#conv       <- c(60*30, 60*30, 60*30, 1, 1, 1, 60*30, 1, 1) #convert to desired units
#ylab       <- c("mm/day", "mm/day", "mm/day", "m2/m2", "gC/m2/day", "gC/m2/day", "mm/day", "deg C", "gC/m2")
vars        <- c("CASAGPP", "CASANPP", "CASArootResp", "CASAgrowthResp", "CASAleafResp", "CASAwoodResp", "CASAsoilResp", "LAI", "Rainf", "TVeg", "ECanop", "ESoil", "Qs", "Qsb", "Tair")
target_vars <- c("CASAGPP", "CASANPP", "CASA auto Resp", "CASAsoilResp", "LAI", "Rainf", "TVeg", "ECanop", "ESoil", "Qs", "Qsb", "Tair")
conv        <- c(1, 1, 1, 1, 1, 1, 1, 1, 60*30, 60*30, 60*30, 60*30, 60*30, 60*30, 1) #convert to desired units
ylab        <- c("gC/m2/day", "gC/m2/day", "gC/m2/day", "gC/m2/day", "m2/m2", "mm/day", "mm/day",  "mm/day", "mm/day", "mm/day", "mm/day", "C")
ylab_annual <- c("gC/m2/yr", "gC/m2/yr",  "gC/m2/yr", "gC/m2/yr", "m2/m2", "mm/yr", "mm/yr",  "mm/yr", "mm/yr", "mm/yr", "mm/yr", "C")
ncid <- lapply(files, nc_open)
data <- list()
for(k in 1:length(ncid)) data[[k]] <- lapply(1:length(vars), function(x) ncvar_get(ncid[[k]], varid=vars[x]) )
#Average non-CASA variables from 30-min to daily
ind   <- which(vars=="ECanop" | vars=="TVeg" | vars=="ESoil" | vars=="Rainf" | vars=="Tair" | vars=="LAI"
| vars=="Qs" | vars=="Qsb" | vars=="GPP" | vars=="NPP")
tstep <- 48 #half-hourly
for(k in 1:length(ncid)) {
for(i in ind) {
data[[k]][[i]] <- data[[k]][[i]] * conv[i]
if(vars[i]=="Tair"){
data[[k]][[i]] <- rowMeans(matrix(data[[k]][[i]], ncol=tstep, byrow=TRUE)) - 273.15
}else if(vars[i]=="LAI"){
data[[k]][[i]] <- rowMeans(matrix(data[[k]][[i]], ncol=tstep, byrow=TRUE))
} else {
data[[k]][[i]] <- rowSums(matrix(data[[k]][[i]], ncol=tstep, byrow=TRUE))
}
}
}
if(any(target_vars=="CASA auto Resp")){
ind2 <- which(vars=="CASArootResp" | vars=="CASAgrowthResp" | vars=="CASAleafResp" | vars=="CASAwoodResp")
if(length(ind2) != 4) stop("ERROR in auto. respiration")
auto_resp <- lapply(data, function(y) rowSums(matrix(unlist(lapply(ind2, function(z) y[[z]])), ncol=length(ind2))))  #sum CASA respirations
for(k in 1:length(data)){
data[[k]][[ind2[1]]] <- auto_resp[[k]]
data[[k]][ind2[2:length(ind2)]] <- NULL
}
}
#only plot last ten yrs
#if(site=="Konza" | site=="grassLTER"){
#  data <- lapply(data, function(y) lapply(y, function(z) z[(length(z)-3649):length(z)]))
#}
#Convert temperature K to C
#for(k in 1:length(ncid)) data[[k]][[which(vars=="Tair")]] <- data[[k]][[which(vars=="Tair")]] - 273.15
#Convert total NPP to ANPP
#for(k in 1:length(ncid)) data[[k]][[which(target_vars=="ANPP")]] <- data[[k]][[which(target_vars=="ANPP")]] *
#                                                                   leaffrac[[k]][(length(leaffrac[[k]])-
#                                                                  (length(data[[k]][[1]])-1)):length(leaffrac[[k]])]
##Obtain years ##
#Start yr
start_yr <- as.numeric(strsplit(strsplit(ncatt_get(ncid[[1]], "time", "units")$value, "seconds since ")[[1]][2], "-01-01")[[1]][1])
#No. yrs
yrs <- round(length(data[[k]][[1]])/365, digits=0)
#All yrs
all_yrs <- seq(start_yr, length.out=yrs, by=1)
pdf(paste("~/Documents/Rainfall_assymmetry/figures/", site, run_id, "_runs_daily_timeseries_testing.pdf", sep=""), height=15, width=18)
par(mfrow=c(5,2))
par(mai=c(0.7,0.7,0.5,0.5))
if(site=="Stubai")     cols <- c("green", "chartreuse4", "cornflowerblue", "darkred", "blue", "red", "salmon", "orange", "yellow")
if(site=="Konza")      cols <- c("blue","red")#c("green", "chartreuse4", "cornflowerblue", "darkred", "blue", "red", "darkblue", "salmon", "orange", "yellow")
if(site=="grassLTER")  cols <- c("green", "chartreuse4", "cornflowerblue", "darkred", "blue", "darkblue", "orange", "yellow")
for(k in 1:(length(target_vars))) #Ignore CASA_Cplant
{
fac=14
x <- rollmean(1:length(data[[1]][[k]]), k=fac)
datrange <- range(sapply(data, function(x) range(rollmean(x[[k]], k=fac))))
plot(c(1,max(x)), datrange, type='n', xaxt="n", xlab="Year", ylab=ylab[k], main=target_vars[k], cex.main=1.7, cex.lab=1.5, cex.axis=1.5)
for(n in 1:length(data))
{
plotdata <- rollmean(data[[n]][[k]], k=fac)
lines(x, plotdata, lwd=1, lty=1, col=cols[n])
}
axis(side=1, at=seq(1, length.out=yrs, by=365), labels=all_yrs, cex.axis=1.5)
}
## GPP / ET
#x <- rollmean(1:length(data[[1]][[k]]), k=fac)
#datrange <- range(sapply(data, function(x) range(rollmean(x[[k]], k=fac))))
#plot(c(1,max(x)), datrange, type='n', xlab="Day", ylab=ylab[k], main=vars[k], cex.main=1.7, cex.lab=1.5, cex.axis=1.5)
#for(n in 1:length(data))
#{
# plotdata <- rollmean(data[[n]][[k]], k=fac)
#  lines(x, plotdata, lwd=1, lty=1, col=cols[n])
#}
#plotyy()
#sorting colours and experiments....
exp_rain <- as.numeric(unlist(strsplit(unlist(experiments), site))[seq(2,length(experiments)*2, by=2)])
par(mai=c(0.35,0.35,0.35,0.35))
plot(c(1,max(x)), datrange, type='n', xaxt="n", yaxt="n", ylab="", xlab="", bty="n")
legend(x="top", legend=paste(site, exp_rain[order(exp_rain)], sep=""), col=cols[order(exp_rain)],
bty="n", lwd=4, xpd=NA, cex=1.8)
dev.off()
pdf(paste("~/Documents/Rainfall_assymmetry/figures/", site, run_id, "_runs_daily_timeseries_testing.pdf", sep=""), height=15, width=18)
par(mfrow=c(5,2))
par(mai=c(0.7,0.7,0.5,0.5))
if(site=="Stubai")     cols <- c("green", "chartreuse4", "cornflowerblue", "darkred", "blue", "red", "salmon", "orange", "yellow")
if(site=="Konza")      cols <- c("green", "chartreuse4", "cornflowerblue", "darkred", "blue", "red", "darkblue", "salmon", "orange", "yellow")
if(site=="grassLTER")  cols <- c("green", "chartreuse4", "cornflowerblue", "darkred", "blue", "darkblue", "orange", "yellow")
for(k in 1:(length(target_vars))) #Ignore CASA_Cplant
{
fac=14
x <- rollmean(1:length(data[[1]][[k]]), k=fac)
datrange <- range(sapply(data, function(x) range(rollmean(x[[k]], k=fac))))
plot(c(1,max(x)), datrange, type='n', xaxt="n", xlab="Year", ylab=ylab[k], main=target_vars[k], cex.main=1.7, cex.lab=1.5, cex.axis=1.5)
for(n in 1:length(data))
{
plotdata <- rollmean(data[[n]][[k]], k=fac)
lines(x, plotdata, lwd=1, lty=1, col=cols[n])
}
axis(side=1, at=seq(1, length.out=yrs, by=365), labels=all_yrs, cex.axis=1.5)
}
## GPP / ET
#x <- rollmean(1:length(data[[1]][[k]]), k=fac)
#datrange <- range(sapply(data, function(x) range(rollmean(x[[k]], k=fac))))
#plot(c(1,max(x)), datrange, type='n', xlab="Day", ylab=ylab[k], main=vars[k], cex.main=1.7, cex.lab=1.5, cex.axis=1.5)
#for(n in 1:length(data))
#{
# plotdata <- rollmean(data[[n]][[k]], k=fac)
#  lines(x, plotdata, lwd=1, lty=1, col=cols[n])
#}
#plotyy()
#sorting colours and experiments....
exp_rain <- as.numeric(unlist(strsplit(unlist(experiments), site))[seq(2,length(experiments)*2, by=2)])
par(mai=c(0.35,0.35,0.35,0.35))
plot(c(1,max(x)), datrange, type='n', xaxt="n", yaxt="n", ylab="", xlab="", bty="n")
legend(x="top", legend=paste(site, exp_rain[order(exp_rain)], sep=""), col=cols[order(exp_rain)],
bty="n", lwd=4, xpd=NA, cex=1.8)
dev.off()
range(data[[1]][[5]]-data[[2]][[5]])
range(data[[3]][[5]]-data[[2]][[5]])
infile
# This directory should contain appropriate data from
# http://fluxnet.fluxdata.org/data/fluxnet2015-dataset/
in_path <- "~/Documents/FLUXNET2016_processing/Inputs"
#Outputs will be saved to this directory
out_path <- "~/Documents/FLUXNET2016_processing/Outputs"
# Name and version of dataset being processed (e.g. "FLUXNET2015")
datasetname="FLUXNET2015"
# Input Fluxnet data file (using FULLSET in this example, se R/Helpers.R for details)
infile <- get_fluxnet_files(in_path, datasetname=datasetname)
#Retrieve dataset version
datasetversion <- get_fluxnet_version_no(infile)
###############################
###--- Optional settings ---###
###############################
# ERAinterim meteo file for gap-filling met data (set to FALSE if not desired)
ERA_gapfill  <- TRUE
ERA_file <- get_fluxnet_erai_files(in_path, datasetname = datasetname,
datasetversion = datasetversion)
#What percentage of time steps allowed to be missing
infile
source('~/Documents/FLUXNET2016_processing/scripts/R/Helpers.R')
library(FluxnetLSM)  # convert_fluxnet_to_netcdf
#clear R environment
rm(list=ls(all=TRUE))
#############################
###--- Required inputs ---###
#############################
# This directory should contain appropriate data from
# http://fluxnet.fluxdata.org/data/fluxnet2015-dataset/
in_path <- "~/Documents/FLUXNET2016_processing/Inputs"
#Outputs will be saved to this directory
out_path <- "~/Documents/FLUXNET2016_processing/Outputs"
# Name and version of dataset being processed (e.g. "FLUXNET2015")
datasetname="FLUXNET2015"
# Input Fluxnet data file (using FULLSET in this example, se R/Helpers.R for details)
infile <- get_fluxnet_files(in_path, datasetname=datasetname)
#Retrieve dataset version
datasetversion <- get_fluxnet_version_no(infile)
infile
in_path
# This directory should contain appropriate data from
# http://fluxnet.fluxdata.org/data/fluxnet2015-dataset/
in_path <- "~/Documents/FLUXNET2016_processing/Inputs"
#Outputs will be saved to this directory
out_path <- "~/Documents/FLUXNET2016_processing/Outputs"
# Name and version of dataset being processed (e.g. "FLUXNET2015")
datasetname="FLUXNET2015"
# Input Fluxnet data file (using FULLSET in this example, se R/Helpers.R for details)
infile <- get_fluxnet_files(in_path, datasetname=datasetname)
infile
path=in_path
site_code = "[A-Z]{2}-[A-Z]{3}"
template <- get_fluxnet_file_template(site_code = site_code, ...)
template <- get_fluxnet_file_template(site_code = site_code)
template
list.files(path, template, full.names = TRUE, ignore.case=TRUE)
source('~/Documents/FLUXNET2016_processing/scripts/R/Helpers.R')
# This directory should contain appropriate data from
# http://fluxnet.fluxdata.org/data/fluxnet2015-dataset/
in_path <- "~/Documents/FLUXNET2016_processing/Inputs"
#Outputs will be saved to this directory
out_path <- "~/Documents/FLUXNET2016_processing/Outputs"
# Name and version of dataset being processed (e.g. "FLUXNET2015")
datasetname="FLUXNET2015"
# Input Fluxnet data file (using FULLSET in this example, se R/Helpers.R for details)
infile <- get_fluxnet_files(in_path, datasetname=datasetname)
infile
?duplicate_columns
devtools::install_github('dudek313/palsR')
devtools::document()
setwd("~/Documents/FLUXNET2016_processing/scripts/")
devtools::document()
devtools::install_github('dudek313/palsR')
?duplicated
library(FluxnetLSM)
convert_fluxnet_to_netcdf
?convert_fluxnet_to_netcdf
infile
file=infile[1]
site_code <- substr(file, "/")
strsplit(file, "/")
strsplit(file, "FLX_")
path
strsplit(file, path)
strsplit(file, "/")
grepl(datasetname, strsplit(file, "/") )
grepl(datasetname, strsplit(file, "/")[[1]] )
grepl(datasetname, strsplit(file, "/")[[1]])
strsplit(file, "/")[[1]]
grepl(datasetname, strsplit(file, "/")[[1]])
no_path <- split[grepl(datasetname, split)[]
no_path <- split[grepl(datasetname, split)]
split <- strsplit(file, "/")[[1]]
no_path <- split[grepl(datasetname, split)]
no_path
?substr
split <- strsplit(file, "/")[[1]]
no_path   <- split[grepl(datasetname, split)]
site_code <- substr(no_path, start=5, stop=10)
site_code
source('~/Documents/FLUXNET2016_processing/scripts/R/Helpers.R')
get_fluxnet_site_code(infile)
infile
# Input Fluxnet data file (using FULLSET in this example, se R/Helpers.R for details)
infiles <- get_fluxnet_files(in_path, datasetname=datasetname)
#Retrieve dataset versions
datasetversion <- sapply(infiles, get_fluxnet_version_no)
infiles
datasetversion
# Input Fluxnet data files (using FULLSET in this example, se R/Helpers.R for details)
infiles <- get_fluxnet_files(in_path, datasetname=datasetname, subset="FULLSET")
#Retrieve dataset versions
datasetversions <- sapply(infiles, get_fluxnet_version_no)
#Retrieve site codes
site_codes <- sapply(infiles, get_fluxnet_site_code)
infiles
site_codes
datasetversions
ERA_file <- sapply(site_codes, get_fluxnet_erai_files, in_path, datasetname = datasetname)
ERA_file
get_fluxnet_erai_files
ERA_file <- sapply(site_codes, function(x) get_fluxnet_erai_files(in_path, x, datasetname = datasetname))
ERA_file
ERA_files <- sapply(site_codes, function(x) get_fluxnet_erai_files(in_path, site_code=x,
datasetname = datasetname))
source('~/Documents/FLUXNET2016_processing/scripts/examples/example_conversion_multiple_sites.R')
source('~/Documents/FLUXNET2016_processing/scripts/R/Helpers.R')
# This directory should contain appropriate data from
# http://fluxnet.fluxdata.org/data/fluxnet2015-dataset/
in_path <- "~/Documents/FLUXNET2016_processing/Inputs"
#Outputs will be saved to this directory
out_path <- "~/Documents/FLUXNET2016_processing/Outputs"
# Name and version of dataset being processed (e.g. "FLUXNET2015")
datasetname="FLUXNET2015"
#--- Automatically retrieve all Fluxnet files in input directory ---#
# Input Fluxnet data files (using FULLSET in this example, se R/Helpers.R for details)
infiles <- get_fluxnet_files(in_path, datasetname=datasetname, subset="FULLSET")
infiles
datasetversions <- sapply(infiles, get_fluxnet_version_no)
#Retrieve site codes
site_codes <- sapply(infiles, get_fluxnet_site_code)
datasetversions
site_codes
ERA_gapfill  <- TRUE
ERA_files <- sapply(site_codes, function(x) get_fluxnet_erai_files(in_path, site_code=x,
datasetname = datasetname))
ERA_files
#Thresholds for missing and gap-filled time steps
#Note: Always checks for missing values. If no gapfilling
#thresholds set, will not check for gap-filling.
missing      <- 15 #max. percent missing (must be set)
gapfill_all  <- 20 #max. percent gapfilled (optional)
gapfill_good <- NA #max. percent good-quality gapfilled (optional, ignored if gapfill_all set)
gapfill_med  <- NA #max. percent medium-quality gapfilled (optional, ignored if gapfill_all set)
gapfill_poor <- NA #max. percent poor-quality gapfilled (optional, ignored if gapfill_all set)
min_yrs      <- 2  #min. number of consecutive years
#Should code produce plots to visualise outputs? Set to NA if not desired.
#(annual: average monthly cycle; diurnal: average diurnal cycle by season;
#timeseries: 14-day running mean time series)
plot <- c("annual", "diurnal","timeseries")
#Should all evaluation variables be included regardless of data gaps?
#If FALSE, removes evaluation variables with gaps in excess of thresholds
include_all_eval <- TRUE
ERA_files
infiles
site_codes
mapply(function(x,y,z) convert_fluxnet_to_netcdf(infile=x, site_code=y, out_path=out_path,
ERA_file=z, ERA_gapfill=ERA_gapfill, datasetname=datasetname,
datasetversion=datasetversion, missing = missing,
gapfill_all=gapfill_all, gapfill_good=gapfill_good,
gapfill_med=gapfill_med, gapfill_poor=gapfill_poor,
include_all_eval=include_all_eval,
min_yrs=min_yrs, plot=plot),
x=infiles, y=site_codes, z=ERA_files)
#Loops through sites
mapply(function(w,x,y,z) convert_fluxnet_to_netcdf(infile=w, site_code=x, out_path=out_path,
ERA_file=y, ERA_gapfill=ERA_gapfill, datasetname=datasetname,
datasetversion=z, missing = missing,
gapfill_all=gapfill_all, gapfill_good=gapfill_good,
gapfill_med=gapfill_med, gapfill_poor=gapfill_poor,
include_all_eval=include_all_eval,
min_yrs=min_yrs, plot=plot),
w=infiles, x=site_codes,
y=ERA_files, z=datasetversions)
devtools::document()
